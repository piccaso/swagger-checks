// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RestApi.Basic.Client.Autorest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MyComplexThing
    {
        /// <summary>
        /// Initializes a new instance of the MyComplexThing class.
        /// </summary>
        public MyComplexThing()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MyComplexThing class.
        /// </summary>
        public MyComplexThing(System.Guid guid, byte[] bytes = default(byte[]), IDictionary<string, MyComplexThing> otherThings = default(IDictionary<string, MyComplexThing>), IList<MyComplexThing> myComplexThings = default(IList<MyComplexThing>), string uri = default(string))
        {
            Bytes = bytes;
            OtherThings = otherThings;
            MyComplexThings = myComplexThings;
            Guid = guid;
            Uri = uri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bytes")]
        public byte[] Bytes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "otherThings")]
        public IDictionary<string, MyComplexThing> OtherThings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "myComplexThings")]
        public IList<MyComplexThing> MyComplexThings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "guid")]
        public System.Guid Guid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uri")]
        public string Uri { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OtherThings != null)
            {
                foreach (var valueElement in OtherThings.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (MyComplexThings != null)
            {
                foreach (var element in MyComplexThings)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
